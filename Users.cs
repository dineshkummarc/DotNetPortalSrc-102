//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Portal {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Users : DataSet {
        
        private UserDataTable tableUser;
        
        private UserRoleDataTable tableUserRole;
        
        private RoleDataTable tableRole;
        
        private DataRelation relationUser_UserRole;
        
        private DataRelation relationRoleUserRole;
        
        public Users() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Users(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["User"] != null)) {
                    this.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["UserRole"] != null)) {
                    this.Tables.Add(new UserRoleDataTable(ds.Tables["UserRole"]));
                }
                if ((ds.Tables["Role"] != null)) {
                    this.Tables.Add(new RoleDataTable(ds.Tables["Role"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserRoleDataTable UserRole {
            get {
                return this.tableUserRole;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RoleDataTable Role {
            get {
                return this.tableRole;
            }
        }
        
        public override DataSet Clone() {
            Users cln = ((Users)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["User"] != null)) {
                this.Tables.Add(new UserDataTable(ds.Tables["User"]));
            }
            if ((ds.Tables["UserRole"] != null)) {
                this.Tables.Add(new UserRoleDataTable(ds.Tables["UserRole"]));
            }
            if ((ds.Tables["Role"] != null)) {
                this.Tables.Add(new RoleDataTable(ds.Tables["Role"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUser = ((UserDataTable)(this.Tables["User"]));
            if ((this.tableUser != null)) {
                this.tableUser.InitVars();
            }
            this.tableUserRole = ((UserRoleDataTable)(this.Tables["UserRole"]));
            if ((this.tableUserRole != null)) {
                this.tableUserRole.InitVars();
            }
            this.tableRole = ((RoleDataTable)(this.Tables["Role"]));
            if ((this.tableRole != null)) {
                this.tableRole.InitVars();
            }
            this.relationUser_UserRole = this.Relations["User_UserRole"];
            this.relationRoleUserRole = this.Relations["RoleUserRole"];
        }
        
        private void InitClass() {
            this.DataSetName = "Users";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Users.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableUser = new UserDataTable();
            this.Tables.Add(this.tableUser);
            this.tableUserRole = new UserRoleDataTable();
            this.Tables.Add(this.tableUserRole);
            this.tableRole = new RoleDataTable();
            this.Tables.Add(this.tableRole);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("User_UserRole", new DataColumn[] {
                        this.tableUser.loginColumn}, new DataColumn[] {
                        this.tableUserRole.loginColumn});
            this.tableUserRole.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("RoleUserRole", new DataColumn[] {
                        this.tableRole.nameColumn}, new DataColumn[] {
                        this.tableUserRole.nameColumn});
            this.tableUserRole.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.Cascade;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationUser_UserRole = new DataRelation("User_UserRole", new DataColumn[] {
                        this.tableUser.loginColumn}, new DataColumn[] {
                        this.tableUserRole.loginColumn}, false);
            this.relationUser_UserRole.Nested = true;
            this.Relations.Add(this.relationUser_UserRole);
            this.relationRoleUserRole = new DataRelation("RoleUserRole", new DataColumn[] {
                        this.tableRole.nameColumn}, new DataColumn[] {
                        this.tableUserRole.nameColumn}, false);
            this.Relations.Add(this.relationRoleUserRole);
        }
        
        private bool ShouldSerializeUser() {
            return false;
        }
        
        private bool ShouldSerializeUserRole() {
            return false;
        }
        
        private bool ShouldSerializeRole() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void UserRoleRowChangeEventHandler(object sender, UserRoleRowChangeEvent e);
        
        public delegate void RoleRowChangeEventHandler(object sender, RoleRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlogin;
            
            private DataColumn columnpassword;
            
            private DataColumn columnfirstName;
            
            private DataColumn columnsurName;
            
            internal UserDataTable() : 
                    base("User") {
                this.InitClass();
            }
            
            internal UserDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            internal DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            internal DataColumn firstNameColumn {
                get {
                    return this.columnfirstName;
                }
            }
            
            internal DataColumn surNameColumn {
                get {
                    return this.columnsurName;
                }
            }
            
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            public UserRow AddUserRow(string login, string password, string firstName, string surName) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                rowUserRow.ItemArray = new object[] {
                        login,
                        password,
                        firstName,
                        surName};
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            public UserRow FindBylogin(string login) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            login})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            internal void InitVars() {
                this.columnlogin = this.Columns["login"];
                this.columnpassword = this.Columns["password"];
                this.columnfirstName = this.Columns["firstName"];
                this.columnsurName = this.Columns["surName"];
            }
            
            private void InitClass() {
                this.columnlogin = new DataColumn("login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlogin);
                this.columnpassword = new DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassword);
                this.columnfirstName = new DataColumn("firstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfirstName);
                this.columnsurName = new DataColumn("surName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsurName);
                this.Constraints.Add(new UniqueConstraint("User_login", new DataColumn[] {
                                this.columnlogin}, true));
                this.columnlogin.AllowDBNull = false;
                this.columnlogin.Unique = true;
            }
            
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough(), Serializable()]
        public class UserRow : DataRow {
            
            private UserDataTable tableUser;
            
            internal UserRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            public string login {
                get {
                    return ((string)(this[this.tableUser.loginColumn]));
                }
                set {
                    this[this.tableUser.loginColumn] = value;
                }
            }
            
            public string password {
                get {
                    try {
                        return ((string)(this[this.tableUser.passwordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.passwordColumn] = value;
                }
            }
            
            public string firstName {
                get {
                    try {
                        return ((string)(this[this.tableUser.firstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.firstNameColumn] = value;
                }
            }
            
            public string surName {
                get {
                    try {
                        return ((string)(this[this.tableUser.surNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.surNameColumn] = value;
                }
            }
            
            public bool IspasswordNull() {
                return this.IsNull(this.tableUser.passwordColumn);
            }
            
            public void SetpasswordNull() {
                this[this.tableUser.passwordColumn] = System.Convert.DBNull;
            }
            
            public bool IsfirstNameNull() {
                return this.IsNull(this.tableUser.firstNameColumn);
            }
            
            public void SetfirstNameNull() {
                this[this.tableUser.firstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IssurNameNull() {
                return this.IsNull(this.tableUser.surNameColumn);
            }
            
            public void SetsurNameNull() {
                this[this.tableUser.surNameColumn] = System.Convert.DBNull;
            }
            
            public UserRoleRow[] GetUserRoleRows() {
                return ((UserRoleRow[])(this.GetChildRows(this.Table.ChildRelations["User_UserRole"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRowChangeEvent : EventArgs {
            
            private UserRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserRowChangeEvent(UserRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRoleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnlogin;
            
            internal UserRoleDataTable() : 
                    base("UserRole") {
                this.InitClass();
            }
            
            internal UserRoleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            public UserRoleRow this[int index] {
                get {
                    return ((UserRoleRow)(this.Rows[index]));
                }
            }
            
            public event UserRoleRowChangeEventHandler UserRoleRowChanged;
            
            public event UserRoleRowChangeEventHandler UserRoleRowChanging;
            
            public event UserRoleRowChangeEventHandler UserRoleRowDeleted;
            
            public event UserRoleRowChangeEventHandler UserRoleRowDeleting;
            
            public void AddUserRoleRow(UserRoleRow row) {
                this.Rows.Add(row);
            }
            
            public UserRoleRow AddUserRoleRow(RoleRow parentRoleRowByRoleUserRole, UserRow parentUserRowByUser_UserRole) {
                UserRoleRow rowUserRoleRow = ((UserRoleRow)(this.NewRow()));
                rowUserRoleRow.ItemArray = new object[] {
                        parentRoleRowByRoleUserRole[0],
                        parentUserRowByUser_UserRole[0]};
                this.Rows.Add(rowUserRoleRow);
                return rowUserRoleRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserRoleDataTable cln = ((UserRoleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserRoleDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnlogin = this.Columns["login"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnlogin = new DataColumn("login", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnlogin);
                this.columnname.Namespace = "";
            }
            
            public UserRoleRow NewUserRoleRow() {
                return ((UserRoleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserRoleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserRoleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRoleRowChanged != null)) {
                    this.UserRoleRowChanged(this, new UserRoleRowChangeEvent(((UserRoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRoleRowChanging != null)) {
                    this.UserRoleRowChanging(this, new UserRoleRowChangeEvent(((UserRoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRoleRowDeleted != null)) {
                    this.UserRoleRowDeleted(this, new UserRoleRowChangeEvent(((UserRoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRoleRowDeleting != null)) {
                    this.UserRoleRowDeleting(this, new UserRoleRowChangeEvent(((UserRoleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserRoleRow(UserRoleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRoleRow : DataRow {
            
            private UserRoleDataTable tableUserRole;
            
            internal UserRoleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserRole = ((UserRoleDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableUserRole.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserRole.nameColumn] = value;
                }
            }
            
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["User_UserRole"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["User_UserRole"]);
                }
            }
            
            public RoleRow RoleRow {
                get {
                    return ((RoleRow)(this.GetParentRow(this.Table.ParentRelations["RoleUserRole"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RoleUserRole"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableUserRole.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableUserRole.nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRoleRowChangeEvent : EventArgs {
            
            private UserRoleRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserRoleRowChangeEvent(UserRoleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserRoleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RoleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            internal RoleDataTable() : 
                    base("Role") {
                this.InitClass();
            }
            
            internal RoleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public RoleRow this[int index] {
                get {
                    return ((RoleRow)(this.Rows[index]));
                }
            }
            
            public event RoleRowChangeEventHandler RoleRowChanged;
            
            public event RoleRowChangeEventHandler RoleRowChanging;
            
            public event RoleRowChangeEventHandler RoleRowDeleted;
            
            public event RoleRowChangeEventHandler RoleRowDeleting;
            
            public void AddRoleRow(RoleRow row) {
                this.Rows.Add(row);
            }
            
            public RoleRow AddRoleRow(string name) {
                RoleRow rowRoleRow = ((RoleRow)(this.NewRow()));
                rowRoleRow.ItemArray = new object[] {
                        name};
                this.Rows.Add(rowRoleRow);
                return rowRoleRow;
            }
            
            public RoleRow FindByname(string name) {
                return ((RoleRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RoleDataTable cln = ((RoleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RoleDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Role_login", new DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
            }
            
            public RoleRow NewRoleRow() {
                return ((RoleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RoleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RoleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RoleRowChanged != null)) {
                    this.RoleRowChanged(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RoleRowChanging != null)) {
                    this.RoleRowChanging(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RoleRowDeleted != null)) {
                    this.RoleRowDeleted(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RoleRowDeleting != null)) {
                    this.RoleRowDeleting(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRoleRow(RoleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RoleRow : DataRow {
            
            private RoleDataTable tableRole;
            
            internal RoleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRole = ((RoleDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableRole.nameColumn]));
                }
                set {
                    this[this.tableRole.nameColumn] = value;
                }
            }
            
            public UserRoleRow[] GetUserRoleRows() {
                return ((UserRoleRow[])(this.GetChildRows(this.Table.ChildRelations["RoleUserRole"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RoleRowChangeEvent : EventArgs {
            
            private RoleRow eventRow;
            
            private DataRowAction eventAction;
            
            public RoleRowChangeEvent(RoleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RoleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
